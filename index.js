#!/usr/bin/env node
'use strict'

import { execSync } from "child_process";
import axios from "axios";
import inquirer from "inquirer";
import { writeFileSync, unlinkSync, existsSync, readFileSync } from "fs";
import { tmpdir, homedir } from "os";
import path from "path";
import * as dotenv from 'dotenv';
import fs from 'fs';
import os from 'os';
import { getArgs, checkGitRepository } from "./helpers.js";

dotenv.config();

const args = getArgs();
const REGENERATE_MSG = "‚ôªÔ∏è Regenerar mensajes";
const QWEN_MODEL = "qwen/qwen3-30b-a3b";
const ENV_VAR_NAME = "OPENROUTER_API_KEY";
const CONFIG_PATH = path.join(homedir(), ".commitconfig.json");

// Configuraci√≥n de tokens
const MAX_TOKEN_LENGTH = 13050; // L√≠mite aproximado de tokens por solicitud
const CHUNK_OVERLAP = 200; // Solapamiento entre chunks para mantener contexto

// Funci√≥n para estimar tokens (aproximaci√≥n simple)
function estimateTokens(text) {
  // Aproximaci√≥n: 1 token ‚âà 4 caracteres para texto en espa√±ol
  return Math.ceil(text.length / 4);
}

// Funci√≥n para validar que el mensaje est√© en espa√±ol
function validateSpanishCommit(title, body) {
  // Palabras clave en ingl√©s que NO deben aparecer en commits
  const englishKeywords = [
    'add', 'added', 'adding', 'create', 'created', 'creating', 'update', 'updated', 'updating',
    'fix', 'fixed', 'fixing', 'remove', 'removed', 'removing', 'delete', 'deleted', 'deleting',
    'implement', 'implemented', 'implementing', 'improve', 'improved', 'improving',
    'refactor', 'refactored', 'refactoring', 'change', 'changed', 'changing',
    'modify', 'modified', 'modifying', 'enhance', 'enhanced', 'enhancing'
  ];

  // Palabras clave en espa√±ol que S√ç deben aparecer
  const spanishKeywords = [
    'agregar', 'a√±adir', 'crear', 'actualizar', 'corregir', 'solucionar', 'arreglar',
    'eliminar', 'remover', 'implementar', 'mejorar', 'refactorizar', 'cambiar',
    'modificar', 'optimizar', 'configurar', 'integrar', 'desarrollar'
  ];

  const fullText = (title + ' ' + body).toLowerCase();
  
  // Verificar si contiene palabras en ingl√©s
  const hasEnglish = englishKeywords.some(keyword => 
    fullText.includes(keyword.toLowerCase())
  );
  
  // Verificar si contiene palabras en espa√±ol
  const hasSpanish = spanishKeywords.some(keyword => 
    fullText.includes(keyword.toLowerCase())
  );

  // Verificar que el t√≠tulo no est√© en ingl√©s
  const titleLower = title.toLowerCase();
  const isEnglishTitle = englishKeywords.some(keyword => 
    titleLower.includes(keyword)
  );

  return {
    isValid: !hasEnglish && !isEnglishTitle,
    hasSpanish,
    hasEnglish,
    isEnglishTitle
  };
}

// Funci√≥n para dividir el diff en chunks manejables
function splitDiffIntoChunks(diff, maxTokens = MAX_TOKEN_LENGTH) {
  const lines = diff.split('\n');
  const chunks = [];
  let currentChunk = [];
  let currentTokens = 0;
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const lineTokens = estimateTokens(line);
    
    // Si una sola l√≠nea excede el l√≠mite, la dividimos
    if (lineTokens > maxTokens) {
      if (currentChunk.length > 0) {
        chunks.push(currentChunk.join('\n'));
        currentChunk = [];
        currentTokens = 0;
      }
      
      // Dividir l√≠nea muy larga
      const longLineChunks = splitLongLine(line, maxTokens);
      chunks.push(...longLineChunks);
      continue;
    }
    
    // Si agregar esta l√≠nea excede el l√≠mite, guardamos el chunk actual
    if (currentTokens + lineTokens > maxTokens && currentChunk.length > 0) {
      chunks.push(currentChunk.join('\n'));
      
      // Mantener solapamiento para contexto
      const overlapLines = Math.min(5, currentChunk.length);
      currentChunk = currentChunk.slice(-overlapLines);
      currentTokens = estimateTokens(currentChunk.join('\n'));
    }
    
    currentChunk.push(line);
    currentTokens += lineTokens;
  }
  
  // Agregar el √∫ltimo chunk si no est√° vac√≠o
  if (currentChunk.length > 0) {
    chunks.push(currentChunk.join('\n'));
  }
  
  return chunks;
}

// Funci√≥n para dividir l√≠neas muy largas
function splitLongLine(line, maxTokens) {
  const chunks = [];
  const maxLength = maxTokens * 4; // Convertir tokens a caracteres aproximados
  
  for (let i = 0; i < line.length; i += maxLength) {
    chunks.push(line.substring(i, i + maxLength));
  }
  
  return chunks;
}

// Cargar la clave desde JSON local
function loadApiKeyFromJson() {
  if (existsSync(CONFIG_PATH)) {
    try {
      const config = JSON.parse(readFileSync(CONFIG_PATH, "utf8"));
      return config[ENV_VAR_NAME];
    } catch {
      return null;
    }
  }
  return null;
}

// Guardar la clave en JSON local
function saveApiKeyToJson(apiKey) {
  const config = { [ENV_VAR_NAME]: apiKey };
  writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2), "utf8");
  console.log(`‚úÖ Clave guardada en ${CONFIG_PATH}`);
}

// Obtener la API Key
let OPENROUTER_API_KEY = process.env[ENV_VAR_NAME] || loadApiKeyFromJson();

if (!OPENROUTER_API_KEY) {
  const askForApiKey = async () => {
    const { apiKey } = await inquirer.prompt([
      {
        type: 'password',
        name: 'apiKey',
        message: 'üîë Ingresa tu API key de OpenRouter:',
        mask: '*',
        validate: input => input.length > 10 || 'Debe ser una clave v√°lida',
      },
    ]);

    saveApiKeyToJson(apiKey);
    OPENROUTER_API_KEY = apiKey;
  };

  await askForApiKey();
}

console.log("API Key:", OPENROUTER_API_KEY ? "‚úÖ Encontrada" : "‚ùå No encontrada");
if (!OPENROUTER_API_KEY) {
  console.error("‚ö†Ô∏è Debes configurar la variable OPENROUTER_API_KEY");
  process.exit(1);
}

const makeCommit = (title, body = "") => {
  console.log("Creando commit... üöÄ");
  const message = body ? `${title}\n\n${body}` : title;
  const tmpFilePath = path.join(tmpdir(), 'commit-msg.txt');
  writeFileSync(tmpFilePath, message, 'utf8');
  execSync(`git commit --file="${tmpFilePath}"`, { stdio: 'inherit' });
  unlinkSync(tmpFilePath);
  console.log("‚úÖ Commit creado exitosamente");
};

async function callQwenAPI(prompt) {
  try {
    const response = await axios.post(
      "https://openrouter.ai/api/v1/chat/completions",
      {
        model: QWEN_MODEL,
        messages: [
          {
            role: "system",
            content:
              "Eres un experto en mensajes de commit en ESPA√ëOL √öNICAMENTE. REGLAS ABSOLUTAS:\n" +
              "1. TODOS los mensajes deben estar en espa√±ol, NUNCA en ingl√©s\n" +
              "2. T√≠tulo conciso (m√°x 50 caracteres) SIN acentos\n" +
              "3. Cuerpo explicativo OBLIGATORIO en espa√±ol\n" +
              "4. Usa formato: '<tipo>: <descripci√≥n EN ESPA√ëOL>'\n" +
              "5. Lenguaje claro y t√©cnico con vi√±etas EN ESPA√ëOL\n" +
              "6. Nunca incluyas 'Resuelve #123' o referencias similares a issues\n" +
              "7. PROH√çBIDO usar palabras en ingl√©s como 'add', 'fix', 'update', 'create', etc.\n" +
              "8. Usa verbos en infinitivo en espa√±ol: 'agregar', 'corregir', 'actualizar', 'crear'\n" +
              "9. Si detectas ingl√©s en tu respuesta, CORRIGE inmediatamente al espa√±ol\n" +
              "10. VALIDACI√ìN: Cada mensaje debe sonar natural en espa√±ol latino"
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7
      },
      {
        headers: {
          "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
          "Content-Type": "application/json",
          "HTTP-Referer": "https://github.com",
          "X-Title": "AI Commit"
        },
        timeout: 30000
      }
    );

    return response.data.choices[0].message.content;
  } catch (error) {
    console.error("Error en la API:", error.response?.data || error.message);
    process.exit(1);
  }
}

// Funci√≥n para analizar chunks individualmente
async function analyzeChunk(chunk, chunkIndex, totalChunks) {
  const prompt = `Analiza este fragmento de cambios Git (parte ${chunkIndex + 1} de ${totalChunks}) y responde √öNICAMENTE EN ESPA√ëOL:

--- CONTEXTO ---
Este es un fragmento de un diff m√°s grande. Analiza SOLO este fragmento y describe EN ESPA√ëOL:
1. Tipo de cambios principales (feat, fix, docs, style, refactor, etc.)
2. Componentes/archivos afectados
3. Cambios espec√≠ficos realizados
4. Patrones o temas recurrentes

--- FRAGMENTO A ANALIZAR ---
${chunk}

--- FORMATO DE RESPUESTA EN ESPA√ëOL ---
Responde en este formato JSON (TODO EN ESPA√ëOL):
{
  "tipo_principal": "feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert",
  "componentes": ["componente1", "componente2"],
  "cambios": [
    "Cambio espec√≠fico 1 EN ESPA√ëOL",
    "Cambio espec√≠fico 2 EN ESPA√ëOL"
  ],
  "contexto": "Breve descripci√≥n del prop√≥sito general EN ESPA√ëOL"
}

IMPORTANTE: Toda la respuesta debe estar en espa√±ol. No uses palabras en ingl√©s.`;

  const response = await callQwenAPI(prompt);
  
  try {
    // Intentar parsear como JSON
    const jsonMatch = response.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
  } catch (e) {
    // Si no es JSON v√°lido, crear estructura manual
    console.warn(`‚ö†Ô∏è Respuesta no es JSON v√°lido para chunk ${chunkIndex + 1}, procesando manualmente...`);
  }
  
  // An√°lisis manual si el JSON falla
  return {
    tipo_principal: "chore",
    componentes: ["codigo"],
    cambios: [`Cambios en fragmento ${chunkIndex + 1}`],
    contexto: response.substring(0, 100) + "..."
  };
}

// Funci√≥n para consolidar an√°lisis de m√∫ltiples chunks
function consolidateAnalysis(analyses) {
  const tiposFrecuencia = {};
  const todosComponentes = [];
  const todosCambios = [];
  const contextos = [];

  analyses.forEach(analysis => {
    // Contar tipos
    const tipo = analysis.tipo_principal;
    tiposFrecuencia[tipo] = (tiposFrecuencia[tipo] || 0) + 1;
    
    // Recopilar componentes
    if (analysis.componentes) {
      todosComponentes.push(...analysis.componentes);
    }
    
    // Recopilar cambios
    if (analysis.cambios) {
      todosCambios.push(...analysis.cambios);
    }
    
    // Recopilar contexto
    if (analysis.contexto) {
      contextos.push(analysis.contexto);
    }
  });

  // Determinar tipo principal (m√°s frecuente)
  const tipoPrincipal = Object.entries(tiposFrecuencia)
    .sort(([,a], [,b]) => b - a)[0][0];

  // Eliminar duplicados de componentes
  const componentesUnicos = [...new Set(todosComponentes)];

  return {
    tipo_principal: tipoPrincipal,
    componentes: componentesUnicos,
    cambios: todosCambios,
    contexto_general: contextos.join('. ')
  };
}

const generateCommit = async (diff) => {
  const diffTokens = estimateTokens(diff);
  
  console.log(`üìä Tokens estimados: ${diffTokens}`);
  
  if (diffTokens <= MAX_TOKEN_LENGTH) {
    console.log("‚úÖ Diff cabe en una sola solicitud");
    return await generateSingleCommit(diff);
  }
  
  console.log("üîÑ Diff muy largo, dividiendo en chunks...");
  const chunks = splitDiffIntoChunks(diff);
  console.log(`üì¶ Dividido en ${chunks.length} chunks`);
  
  // Analizar cada chunk
  const analyses = [];
  for (let i = 0; i < chunks.length; i++) {
    console.log(`üîç Analizando chunk ${i + 1}/${chunks.length}...`);
    const analysis = await analyzeChunk(chunks[i], i, chunks.length);
    analyses.push(analysis);
    
    // Pausa entre solicitudes para evitar rate limiting
    if (i < chunks.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  // Consolidar an√°lisis
  console.log("üîÑ Consolidando an√°lisis...");
  const consolidatedAnalysis = consolidateAnalysis(analyses);
  
  // Generar commit final basado en an√°lisis consolidado
  return await generateCommitFromAnalysis(consolidatedAnalysis);
};

// Funci√≥n para generar commit de un diff simple
async function generateSingleCommit(diff) {
  const prompt = `Genera EXACTAMENTE 1 mensaje de commit profesional √öNICAMENTE EN ESPA√ëOL con estas REGLAS ABSOLUTAS:

--- FORMATO EXACTO (TODO EN ESPA√ëOL) ---
<tipo>: <t√≠tulo en espa√±ol (max 50 chars, sin acentos)>
* <vi√±eta 1 en infinitivo espa√±ol - cambio principal OBLIGATORIO>
* <vi√±eta 2 en espa√±ol - cambio secundario RELEVANTE si aplica>
* <vi√±eta N en espa√±ol - detalles t√©cnicos adicionales NECESARIOS>

--- TIPOS PERMITIDOS (SOLO ESTOS) ---
feat    - Nueva funcionalidad
fix     - Correcci√≥n de errores
docs    - Documentaci√≥n
style   - Formato/estructura
refactor- Reestructuraci√≥n sin cambiar funcionalidad
perf    - Mejora de rendimiento
test    - Pruebas
chore   - Mantenimiento
build   - Sistema de compilaci√≥n
ci      - Integraci√≥n continua
revert  - Revertir cambios

--- REGLAS DE IDIOMA ESPA√ëOL ---
‚Ä¢ PROH√çBIDO usar palabras en ingl√©s como: add, fix, update, create, remove, etc.
‚Ä¢ USA SOLO verbos en espa√±ol: agregar, corregir, actualizar, crear, eliminar, etc.
‚Ä¢ Toda descripci√≥n debe estar en espa√±ol natural
‚Ä¢ Sin acentos en el t√≠tulo para compatibilidad
‚Ä¢ Cuerpo con vi√±etas detalladas en espa√±ol

--- CAMBIOS A DOCUMENTAR ---
${diff}

Genera EXACTAMENTE 1 commit message EN ESPA√ëOL siguiendo estas reglas.`;

  let attempts = 0;
  let title = "", body = "";

  while (attempts < 5) {
    const fullMessage = await callQwenAPI(prompt);
    const [firstLine, ...rest] = fullMessage.split('\n').filter(Boolean);
    title = firstLine.trim();
    body = rest.join('\n').trim();

    const commitType = title.split(':')[0].trim();
    const validTypes = ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'chore', 'build', 'ci', 'revert'];
    
    // Validar que est√© en espa√±ol
    const spanishValidation = validateSpanishCommit(title, body);
    
    if (body.length > 0 && validTypes.includes(commitType) && spanishValidation.isValid) {
      console.log("‚úÖ Commit generado en espa√±ol correctamente");
      return { title, body };
    }

    if (!spanishValidation.isValid) {
      console.warn(`‚ö†Ô∏è Intento ${attempts + 1}: mensaje contiene ingl√©s, regenerando en espa√±ol...`);
      if (spanishValidation.hasEnglish) {
        console.warn("   - Detectadas palabras en ingl√©s");
      }
      if (spanishValidation.isEnglishTitle) {
        console.warn("   - T√≠tulo en ingl√©s detectado");
      }
    } else {
      console.warn(`‚ö†Ô∏è Intento ${attempts + 1}: mensaje no cumple formato, reintentando...`);
    }
    
    attempts++;
  }

  console.error("‚ùå No se pudo generar un mensaje v√°lido en espa√±ol despu√©s de 5 intentos.");
  process.exit(1);
}

// Funci√≥n para generar commit basado en an√°lisis consolidado
async function generateCommitFromAnalysis(analysis) {
  const prompt = `Genera un mensaje de commit profesional √öNICAMENTE EN ESPA√ëOL basado en este an√°lisis consolidado:

--- AN√ÅLISIS CONSOLIDADO ---
Tipo principal: ${analysis.tipo_principal}
Componentes afectados: ${analysis.componentes.join(', ')}
Cambios realizados:
${analysis.cambios.map(c => `- ${c}`).join('\n')}

Contexto general: ${analysis.contexto_general}

--- FORMATO REQUERIDO (TODO EN ESPA√ëOL) ---
<tipo>: <t√≠tulo en espa√±ol (max 50 chars, sin acentos)>
* <vi√±eta 1 en espa√±ol - cambio principal m√°s importante>
* <vi√±eta 2 en espa√±ol - cambio secundario relevante>
* <vi√±eta N en espa√±ol - detalles t√©cnicos adicionales>

--- REGLAS ESTRICTAS DE IDIOMA ---
1. Usa el tipo principal identificado: ${analysis.tipo_principal}
2. T√≠tulo conciso que resuma el cambio general EN ESPA√ëOL
3. Vi√±etas que expliquen los cambios m√°s importantes EN ESPA√ëOL
4. M√°ximo 50 caracteres en el t√≠tulo
5. Espa√±ol sin acentos
6. PROH√çBIDO usar palabras en ingl√©s
7. Usa verbos en infinitivo espa√±ol: agregar, corregir, actualizar, crear, eliminar

Genera el mensaje de commit EN ESPA√ëOL:`;

  let attempts = 0;
  let title = "", body = "";

  while (attempts < 5) {
    const fullMessage = await callQwenAPI(prompt);
    const [firstLine, ...rest] = fullMessage.split('\n').filter(Boolean);
    title = firstLine.trim();
    body = rest.join('\n').trim();

    const commitType = title.split(':')[0].trim();
    const validTypes = ['feat', 'fix', 'docs', 'style', 'refactor', 'perf', 'test', 'chore', 'build', 'ci', 'revert'];
    
    // Validar que est√© en espa√±ol
    const spanishValidation = validateSpanishCommit(title, body);

    if (body.length > 0 && validTypes.includes(commitType) && spanishValidation.isValid) {
      console.log("‚úÖ Commit generado en espa√±ol correctamente");
      return { title, body };
    }

    if (!spanishValidation.isValid) {
      console.warn(`‚ö†Ô∏è Intento ${attempts + 1}: mensaje contiene ingl√©s, regenerando en espa√±ol...`);
    } else {
      console.warn(`‚ö†Ô∏è Intento ${attempts + 1}: mensaje no cumple formato, reintentando...`);
    }
    
    attempts++;
  }

  console.error("‚ùå No se pudo generar un mensaje v√°lido en espa√±ol despu√©s de 5 intentos.");
  process.exit(1);
}

const generateListCommits = async (diff, numOptions = "3") => {
  const diffTokens = estimateTokens(diff);
  
  if (diffTokens > MAX_TOKEN_LENGTH) {
    console.log("‚ö†Ô∏è Diff muy largo para generar m√∫ltiples opciones, usando an√°lisis por chunks...");
    const chunks = splitDiffIntoChunks(diff);
    
    // Para opciones m√∫ltiples con diff largo, generar an√°lisis simplificado
    const analyses = [];
    for (let i = 0; i < Math.min(chunks.length, 3); i++) {
      const analysis = await analyzeChunk(chunks[i], i, chunks.length);
      analyses.push(analysis);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    const consolidatedAnalysis = consolidateAnalysis(analyses);
    
    // Generar opciones basadas en an√°lisis consolidado
    const options = [];
    for (let i = 0; i < parseInt(numOptions); i++) {
      const commit = await generateCommitFromAnalysis(consolidatedAnalysis);
      options.push(commit);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    return options;
  }

  // Diff normal, usar m√©todo original
  const prompt = `Genera EXACTAMENTE ${numOptions} opciones de mensajes de commit SEM√ÅNTICOS √öNICAMENTE EN ESPA√ëOL para estos cambios:

--- CAMBIOS A COMMITIR ---
${diff}

--- FORMATO REQUERIDO (TODO EN ESPA√ëOL) ---
Para cada opci√≥n, usa el formato:
<tipo>: <t√≠tulo EN ESPA√ëOL>|||<cuerpo con vi√±etas EN ESPA√ëOL>

Ejemplo correcto:
feat: Implementar autenticacion biometrica|||* A√±adir soporte para huella digital
* Integrar API de FaceID
* Crear tests de seguridad

--- REGLAS ESTRICTAS DE IDIOMA ---
‚Ä¢ PROH√çBIDO usar palabras en ingl√©s como: add, fix, update, create, remove, etc.
‚Ä¢ USA SOLO verbos en espa√±ol: agregar, corregir, actualizar, crear, eliminar, etc.
‚Ä¢ Toda descripci√≥n debe estar en espa√±ol natural
‚Ä¢ Sin acentos en el t√≠tulo para compatibilidad
‚Ä¢ Cuerpo con vi√±etas detalladas en espa√±ol

Genera ${numOptions} opciones diferentes EN ESPA√ëOL:`;

  let attempts = 0;
  let validOptions = [];

  while (attempts < 3 && validOptions.length < parseInt(numOptions)) {
    const response = await callQwenAPI(prompt);
    const options = response.split('\n')
      .filter(opt => opt.includes('|||'))
      .map(opt => {
        const [title, body] = opt.split('|||');
        return {
          title: title.trim(),
          body: body?.trim() || ""
        };
      });

    // Validar que todas las opciones est√©n en espa√±ol
    for (const option of options) {
      const spanishValidation = validateSpanishCommit(option.title, option.body);
      if (spanishValidation.isValid && validOptions.length < parseInt(numOptions)) {
        validOptions.push(option);
      }
    }

    attempts++;
  }

  if (validOptions.length === 0) {
    console.error("‚ùå No se pudieron generar opciones v√°lidas en espa√±ol");
    process.exit(1);
  }

  console.log(`‚úÖ Generadas ${validOptions.length} opciones en espa√±ol`);
  return validOptions;
};

const runInteractive = async () => {
  if (!checkGitRepository()) {
    console.error("‚ö†Ô∏è No es un repositorio Git");
    process.exit(1);
  }

  const diff = execSync("git diff --cached").toString();
  if (!diff.trim()) {
    console.log("‚ÑπÔ∏è  No hay cambios preparados (usa 'git add .' primero)");
    process.exit(0);
  }

  console.log("üß† Analizando cambios...");

  if (args.list) {
    const options = await generateListCommits(diff);
    const choices = [
      ...options.map((opt, i) => ({
        name: `${opt.title}\n${opt.body ? opt.body + '\n' : ''}`,
        value: opt
      })),
      { name: REGENERATE_MSG, value: null }
    ];

    const { selected } = await inquirer.prompt({
      type: "list",
      name: "selected",
      message: "Elige un mensaje:",
      choices,
      pageSize: 10
    });

    if (!selected) return await runInteractive();
    return makeCommit(selected.title, selected.body);
  } else {
    const { title, body } = await generateCommit(diff);
    console.log(`\nüí° Mensaje generado:\n${title}\n${body ? '\n' + body + '\n' : ''}`);

    const { confirm } = await inquirer.prompt({
      type: "confirm",
      name: "confirm",
      message: "¬øCrear commit con este mensaje?",
      default: true
    });

    if (confirm) makeCommit(title, body);
    else console.log("üö´ Operaci√≥n cancelada");
  }
};

await runInteractive();